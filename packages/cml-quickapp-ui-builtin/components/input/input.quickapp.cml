<template>
  <origin-input style="{{computedStyle}}" value="{{value}}" type="{{type}}" disabled="{{disabled}}"
    placeholder="{{placeholder}}" maxlength="{{maxlength}}" onchange="inputEvent" onblur="blurEvent"
    onfocus="focusEvent"></origin-input>
</template>
<script>
  import { getValBetweenMaxAndMin } from '../../assets/js/utils';

  class Input implements InputInterface {
    props = {
      cStyle: {
        type: String,
        default: ''
      },
      cstyle: {
        type: String,
        default: ''
      },
      value: {
        type: String,
        default: ''
      },
      //input的类型
      type: {
        type: String,
        default: 'text'  //枚举值 text number password
      },
      //input的placerholder
      placeholder: {
        type: String,
        default: ''
      },
      //是否禁用input输入
      disabled: {
        type: Boolean,
        default: false
      },
      //控制input是否聚焦
      focus: {
        type: Boolean,
        default: false
      },
      //最大长度
      maxlength: {
        type: Number,
        default: 140
      },
      //右下角返回键类型
      returnKeyType: { //枚举值 done search next go
        type: String,
        default: 'done'
      },
      placerHolderColor: {
        type: String,
        default: '#bebebe'
      },
      maxValue: { //type=number 最大值
        type: Number,
        default: Infinity
      },
      minValue: { //type=number 最小值
        type: Number,
        default: -Infinity
      }
    }
    data = {
      inputValue: ""
    }
    computed = {
      isInputNumber() {
        return this.type === 'number';
      },
      computedStyle() {
        // props 必须经过计算属性，否则没有经过 cpx 转换
        return `placeholder-color: ${this.placerHolderColor};${this.cStyle || this.cstyle}`
      }
    }
    // mounted() {
    //   this.inputValue = this.value;
    // }
    methods = {
      inputEvent(e) {
        this.handleDetail(e)

        this.$cmlEmit('input', {
          value: this.inputValue
        })
      },
      blurEvent(e) {
        this.handleDetail(e)

        this.$cmlEmit('blur', {
          value: this.inputValue
        });
      },
      focusEvent(e) {
        this.handleDetail(e)

        this.$cmlEmit('focus', {
          value: this.inputValue
        });
      },
      handleDetail(e) {
        if (!e) {
          return ''
        }

        let value = e.value;

        if (this.isInputNumber) {
          value = getValBetweenMaxAndMin(value, this.maxValue, this.minValue);
        }
        return this.inputValue = value || ''
      }
    }
  }
  export default new Input();
</script>

<style scoped>
</style>

<script cml-type="json">
  {
    "base": {
      "component": true
    }
  }
</script>