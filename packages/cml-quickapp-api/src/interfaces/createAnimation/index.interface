<include src="chameleon-api/src/interfaces/createAnimation/index.interface"></include>

<script cml-type="quickapp">
  import {
    commonLoader as s_commonLoader,
    cacheTransformStylesLoader as s_cacheTransformStylesLoader,
  } from 'chameleon-api/src/interfaces/createAnimation/styleLoader/common';
  import {
    transformLoader as s_transformLoader,
  } from './styleLoader/tt';
  import {
    commonLoader as d_commonLoader,
    cacheTransformOriginLoader as d_cacheTransformOriginLoader,
  } from 'chameleon-api/src/interfaces/createAnimation/descriptionLoader/common';
  import {
    stylePipe,
    descriptionPipe,
  } from './_util';
  const styleLoaderQueue = [s_commonLoader, s_cacheTransformStylesLoader, s_transformLoader];
  const descriptionLoaderQueue = [d_commonLoader, d_cacheTransformOriginLoader];

  const createAnimationFuc = (quene) => {
    const animation = tt.createAnimation();
    const cbs = {};
    quene.forEach((tick, i) => {
      const { styles, descriptions } = tick;
      cbs[i] = descriptions.cb
      Object.keys(styles).forEach((key) => {
        const value = styles[key];

        animation[key](value);
      });

      animation.step(descriptions);
    });

    const temp = JSON.parse(animation.export()); 
    temp.cbs = cbs;
    temp.index = 0;
    return temp;
  };

  class Method implements CreateAnimationInterface {
    initAnimation() {}
    checkNumber(number) {}
    checkString(string) {}
    checkObject(object) {}
    getViewportWidth() {
      const { windowWidth } = tt.getSystemInfoSync();
      return windowWidth;
    }
    exportMiddleWare(param) {
      return createAnimationFuc(param.updateQueue.map(function(tick) {
        return {
          styles: stylePipe(tick.styles, tick.descriptions, styleLoaderQueue, param.id),
          descriptions: descriptionPipe(tick.descriptions, tick.styles, descriptionLoaderQueue, param.id)
        };
      }));
    }
  }

  export default new Method();
</script>
